-- MySQL Script generated by MySQL Workbench
-- Mon Mar 19 15:06:28 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema munisanborja
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema munisanborja
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `munisanborja` DEFAULT CHARACTER SET utf8 ;
USE `munisanborja` ;

-- -----------------------------------------------------
-- Table `munisanborja`.`EstadoViabilidad`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `munisanborja`.`EstadoViabilidad` (
  `codigo` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NULL,
  `descripcon` VARCHAR(45) NULL,
  PRIMARY KEY (`codigo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `munisanborja`.`EstadoTramite`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `munisanborja`.`EstadoTramite` (
  `codigo` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NULL,
  `descripcion` VARCHAR(45) NULL,
  PRIMARY KEY (`codigo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `munisanborja`.`UnidadFormuladora`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `munisanborja`.`UnidadFormuladora` (
  `codigo` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(200) NOT NULL,
  `descripcion` VARCHAR(200) NULL,
  PRIMARY KEY (`codigo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `munisanborja`.`MontoInversionTotal`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `munisanborja`.`MontoInversionTotal` (
  `codigo` INT NOT NULL AUTO_INCREMENT,
  `precioMercado` DOUBLE NULL,
  `precioSocial` DOUBLE NULL,
  PRIMARY KEY (`codigo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `munisanborja`.`CostoBeneficio`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `munisanborja`.`CostoBeneficio` (
  `codigo` INT NOT NULL AUTO_INCREMENT,
  `valorActualNeto` DOUBLE NULL,
  `tasaInternaRetorno` DOUBLE NULL,
  PRIMARY KEY (`codigo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `munisanborja`.`CostoEfectividad`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `munisanborja`.`CostoEfectividad` (
  `codigo` INT NOT NULL AUTO_INCREMENT,
  `ratio` DOUBLE NULL,
  `unidadMedida` VARCHAR(200) NULL,
  PRIMARY KEY (`codigo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `munisanborja`.`Ubicacion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `munisanborja`.`Ubicacion` (
  `codigo` INT NOT NULL AUTO_INCREMENT,
  `departamento` VARCHAR(100) NOT NULL,
  `provincia` VARCHAR(100) NOT NULL,
  `localidad` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`codigo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `munisanborja`.`Requerimiento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `munisanborja`.`Requerimiento` (
  `codigo` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(500) NULL,
  `objetivo` VARCHAR(500) NULL,
  `problema` VARCHAR(500) NULL,
  `fuenteFinanciamiento` VARCHAR(500) NULL,
  `programaInversion` TINYINT NULL,
  `analisisSostenibilidad` LONGTEXT NULL,
  `unidadEjecutoraRecomendada` VARCHAR(500) NULL,
  `costoOperacion` DOUBLE NULL,
  `costoMantenimiento` DOUBLE NULL,
  `fechaCreacion` DATE NULL,
  `fechaActualizacion` DATE NULL,
  `fechaAprobacion` DATE NULL,
  `fechaRechazo` DATE NULL,
  `elaboradoPor` VARCHAR(100) NULL,
  `aprobadoPor` VARCHAR(100) NULL,
  `revisadoPor` VARCHAR(100) NULL,
  `EstadoTramite_codigo` INT NOT NULL,
  `UnidadFormuladora_codigo` INT NOT NULL,
  `MontoInversionTotal_codigo` INT NOT NULL,
  `CostoBeneficio_codigo` INT NOT NULL,
  `CostoEfectividad_codigo` INT NOT NULL,
  `Ubicacion_codigo` INT NOT NULL,
  PRIMARY KEY (`codigo`, `EstadoTramite_codigo`, `UnidadFormuladora_codigo`, `MontoInversionTotal_codigo`, `CostoBeneficio_codigo`, `CostoEfectividad_codigo`, `Ubicacion_codigo`),
  INDEX `fk_Requerimiento_EstadoTramite1_idx` (`EstadoTramite_codigo` ASC),
  INDEX `fk_Requerimiento_UnidadFormuladora1_idx` (`UnidadFormuladora_codigo` ASC),
  INDEX `fk_Requerimiento_MontoInversionTotal1_idx` (`MontoInversionTotal_codigo` ASC),
  INDEX `fk_Requerimiento_CostoBeneficio1_idx` (`CostoBeneficio_codigo` ASC),
  INDEX `fk_Requerimiento_CostoEfectividad1_idx` (`CostoEfectividad_codigo` ASC),
  INDEX `fk_Requerimiento_Ubicacion1_idx` (`Ubicacion_codigo` ASC),
  CONSTRAINT `fk_Requerimiento_EstadoTramite1`
    FOREIGN KEY (`EstadoTramite_codigo`)
    REFERENCES `munisanborja`.`EstadoTramite` (`codigo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Requerimiento_UnidadFormuladora1`
    FOREIGN KEY (`UnidadFormuladora_codigo`)
    REFERENCES `munisanborja`.`UnidadFormuladora` (`codigo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Requerimiento_MontoInversionTotal1`
    FOREIGN KEY (`MontoInversionTotal_codigo`)
    REFERENCES `munisanborja`.`MontoInversionTotal` (`codigo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Requerimiento_CostoBeneficio1`
    FOREIGN KEY (`CostoBeneficio_codigo`)
    REFERENCES `munisanborja`.`CostoBeneficio` (`codigo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Requerimiento_CostoEfectividad1`
    FOREIGN KEY (`CostoEfectividad_codigo`)
    REFERENCES `munisanborja`.`CostoEfectividad` (`codigo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Requerimiento_Ubicacion1`
    FOREIGN KEY (`Ubicacion_codigo`)
    REFERENCES `munisanborja`.`Ubicacion` (`codigo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `munisanborja`.`ProyectoPreInversion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `munisanborja`.`ProyectoPreInversion` (
  `codigo` INT NOT NULL AUTO_INCREMENT,
  `fechaInicio` DATETIME NULL,
  `fechafin` DATETIME NULL,
  `fechaDeclaracionViabilidad` DATETIME NULL,
  `EstadoTramite_codigo` INT NOT NULL,
  `Requerimiento_codigo` INT NOT NULL,
  `EstadoViabilidad_codigo` INT NOT NULL,
  PRIMARY KEY (`codigo`, `EstadoTramite_codigo`),
  INDEX `fk_ProyectoPreInversion_Requerimiento1_idx` (`Requerimiento_codigo` ASC),
  INDEX `fk_ProyectoPreInversion_EstadoTramite1_idx` (`EstadoTramite_codigo` ASC),
  INDEX `fk_ProyectoPreInversion_EstadoViabilidad1_idx` (`EstadoViabilidad_codigo` ASC),
  CONSTRAINT `fk_ProyectoPreInversion_Requerimiento1`
    FOREIGN KEY (`Requerimiento_codigo`)
    REFERENCES `munisanborja`.`Requerimiento` (`codigo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ProyectoPreInversion_EstadoTramite1`
    FOREIGN KEY (`EstadoTramite_codigo`)
    REFERENCES `munisanborja`.`EstadoTramite` (`codigo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ProyectoPreInversion_EstadoViabilidad1`
    FOREIGN KEY (`EstadoViabilidad_codigo`)
    REFERENCES `munisanborja`.`EstadoViabilidad` (`codigo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `munisanborja`.`InformeTecnico`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `munisanborja`.`InformeTecnico` (
  `codigo` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NULL,
  `fechaCreacion` DATETIME NULL,
  `fechaActualizacion` DATETIME NULL,
  `fechaAprobacion` DATETIME NULL,
  `ElaboradoPor` VARCHAR(45) NULL,
  `RevisadoPor` VARCHAR(45) NULL,
  `AprobadoPor` VARCHAR(45) NULL,
  `ProyectoPreInversion_codigo` INT NOT NULL,
  `EstadoTramite_codigo` INT NOT NULL,
  `EstadoTramite_codigo1` INT NOT NULL,
  PRIMARY KEY (`codigo`, `EstadoTramite_codigo`, `EstadoTramite_codigo1`),
  INDEX `fk_InformeTecnico_ProyectoPreInversion1_idx` (`ProyectoPreInversion_codigo` ASC),
  INDEX `fk_InformeTecnico_EstadoTramite1_idx` (`EstadoTramite_codigo` ASC),
  INDEX `fk_InformeTecnico_EstadoTramite2_idx` (`EstadoTramite_codigo1` ASC),
  CONSTRAINT `fk_InformeTecnico_ProyectoPreInversion1`
    FOREIGN KEY (`ProyectoPreInversion_codigo`)
    REFERENCES `munisanborja`.`ProyectoPreInversion` (`codigo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_InformeTecnico_EstadoTramite1`
    FOREIGN KEY (`EstadoTramite_codigo`)
    REFERENCES `munisanborja`.`EstadoTramite` (`codigo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_InformeTecnico_EstadoTramite2`
    FOREIGN KEY (`EstadoTramite_codigo1`)
    REFERENCES `munisanborja`.`EstadoTramite` (`codigo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `munisanborja`.`DetalleInformeTecnico`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `munisanborja`.`DetalleInformeTecnico` (
  `codigo` INT NOT NULL AUTO_INCREMENT,
  `concepto` VARCHAR(45) NULL,
  `valor` VARCHAR(45) NULL,
  `conclusion` VARCHAR(45) NULL,
  `InformeTecnico_codigo` INT NOT NULL,
  `InformeTecnico_EstadoTramite_codigo` INT NOT NULL,
  PRIMARY KEY (`codigo`),
  INDEX `fk_DetalleInformeTecnico_InformeTecnico1_idx` (`InformeTecnico_codigo` ASC, `InformeTecnico_EstadoTramite_codigo` ASC),
  CONSTRAINT `fk_DetalleInformeTecnico_InformeTecnico1`
    FOREIGN KEY (`InformeTecnico_codigo` , `InformeTecnico_EstadoTramite_codigo`)
    REFERENCES `munisanborja`.`InformeTecnico` (`codigo` , `EstadoTramite_codigo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
